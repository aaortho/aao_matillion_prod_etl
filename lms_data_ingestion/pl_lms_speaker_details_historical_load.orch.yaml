type: "orchestration"
version: "1.0"
pipeline:
  components:
    Start:
      type: "start"
      transitions:
        unconditional:
        - "Truncate Speaker Details Table"
      parameters:
        componentName: "Start"
    LMS API:
      type: "modular-api-extract-input-v2"
      parameters:
        componentName: "LMS API"
        componentId: "custom_v2-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
        inputId: "api-extract-input-v2"
        api-extract-input-v2:
          profile: "custom-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
          endpoint: "Speaker_details"
          connectionRef:
            overrides:
              authType: "NONE"
          uriParams:
          - name: "speakerId"
            value: "${v_speaker_id}"
          queryParams:
          headerParams:
          postBody:
          pageLimit:
          logLevel: "ERROR"
          loadSelectedData: "No"
        outputId: "snowflake-output-connector-v0"
        snowflake-output-connector-v0:
          warehouse: "[Environment Default]"
          database: "[Environment Default]"
          schema: "LMS"
          tableName: "SPEAKER_DETAILS"
          createTableMode: "APPEND"
          cleanStagedFiles: "Yes"
          stagePlatform: "SNOWFLAKE"
          snowflake#internalStageType: "USER"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Table Iterator:
      type: "table-iterator"
      transitions:
        success:
        - "Log speaker detail ingestion"
        failure:
        - "Log LMS API Failure"
      iterationTarget: "LMS API"
      parameters:
        componentName: "Table Iterator"
        mode: "Advanced"
        query: "SELECT\r\n    item.value:uuid::STRING AS uuid\r\nFROM PROD_BRONZE_DB.LMS.SPEAKERS,\r\
          \n     LATERAL FLATTEN(input => DATA_VALUE:data) AS item"
        concurrency: "Concurrent"
        columnMapping1:
        - - "UUID"
          - "v_speaker_id"
        breakOnFailure: "No"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Log speaker detail ingestion:
      type: "sql-executor"
      transitions:
        success:
        - "Data Speaker Detail  "
      parameters:
        componentName: "Log speaker detail ingestion"
        scriptLocation: "Component"
        declareSqlVariables: "Include selected"
        variablesToInclude:
        sqlScript: "-- Log success to audit table\nINSERT INTO PROD_BRONZE_DB.LMS.LMS_AUDIT_LOG\
          \ (\n    TABLE_NAME,\n    ROW_COUNT,\n    LOAD_TIME,\n    LOAD_STATUS,\n\
          \    ERROR_MESSAGE\n)\nSELECT \n    'SPEAKER_DETAILS' AS TABLE_NAME,\n \
          \   COUNT(*) AS ROW_COUNT,\n    CURRENT_TIMESTAMP AS LOAD_TIME,\n    'SUCCESS'\
          \ AS LOAD_STATUS,\n    NULL AS ERROR_MESSAGE\nFROM PROD_BRONZE_DB.LMS.SPEAKER_DETAILS;\n"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    'Data Speaker Detail  ':
      type: "sql-executor"
      parameters:
        componentName: "Data Speaker Detail  "
        scriptLocation: "Component"
        declareSqlVariables: "Include selected"
        variablesToInclude:
        sqlScript: |
          MERGE INTO PROD_SILVER_DB.LMS.SPEAKER_DETAILS AS target
          USING (
              SELECT
                  DATA_VALUE:address1::STRING           AS address1,
                  DATA_VALUE:address2::STRING           AS address2,
                  DATA_VALUE:api_key::STRING            AS api_key,
                  DATA_VALUE:city::STRING               AS city,
                  DATA_VALUE:company::STRING            AS company,
                  DATA_VALUE:country::STRING            AS country,
                  DATA_VALUE:created_at::TIMESTAMP_TZ   AS created_at,
                  DATA_VALUE:credentials::STRING        AS credentials,
                  DATA_VALUE:description::STRING        AS description,
                  DATA_VALUE:email::STRING              AS email,
                  DATA_VALUE:first_name::STRING         AS first_name,
                  DATA_VALUE:icon::STRING               AS icon,
                  DATA_VALUE:id::STRING                 AS id,
                  DATA_VALUE:identification::STRING     AS identification,
                  DATA_VALUE:informal::STRING           AS informal,
                  DATA_VALUE:last_name::STRING          AS last_name,
                  DATA_VALUE:linkedin::STRING           AS linkedin,
                  DATA_VALUE:middle_name::STRING        AS middle_name,
                  DATA_VALUE:mobile::STRING             AS mobile,
                  DATA_VALUE:phone::STRING              AS phone,
                  DATA_VALUE:salutation::STRING         AS salutation,
                  DATA_VALUE:state::STRING              AS state,
                  DATA_VALUE:suffix::STRING             AS suffix,
                  DATA_VALUE:title::STRING              AS title,
                  DATA_VALUE:twitter::STRING            AS twitter,
                  DATA_VALUE:updated_at::TIMESTAMP_TZ   AS updated_at,
                  DATA_VALUE:url::STRING                AS url,
                  DATA_VALUE:zip_code::STRING           AS zip_code
              FROM PROD_BRONZE_DB.LMS.SPEAKER_DETAILS
          ) AS source
          ON target.id = source.id

          WHEN MATCHED THEN
              UPDATE SET
                  target.address1 = source.address1,
                  target.address2 = source.address2,
                  target.api_key = source.api_key,
                  target.city = source.city,
                  target.company = source.company,
                  target.country = source.country,
                  target.created_at = source.created_at,
                  target.credentials = source.credentials,
                  target.description = source.description,
                  target.email = source.email,
                  target.first_name = source.first_name,
                  target.icon = source.icon,
                  target.identification = source.identification,
                  target.informal = source.informal,
                  target.last_name = source.last_name,
                  target.linkedin = source.linkedin,
                  target.middle_name = source.middle_name,
                  target.mobile = source.mobile,
                  target.phone = source.phone,
                  target.salutation = source.salutation,
                  target.state = source.state,
                  target.suffix = source.suffix,
                  target.title = source.title,
                  target.twitter = source.twitter,
                  target.updated_at = source.updated_at,
                  target.url = source.url,
                  target.zip_code = source.zip_code

          WHEN NOT MATCHED THEN
              INSERT (
                  address1,
                  address2,
                  api_key,
                  city,
                  company,
                  country,
                  created_at,
                  credentials,
                  description,
                  email,
                  first_name,
                  icon,
                  id,
                  identification,
                  informal,
                  last_name,
                  linkedin,
                  middle_name,
                  mobile,
                  phone,
                  salutation,
                  state,
                  suffix,
                  title,
                  twitter,
                  updated_at,
                  url,
                  zip_code
              )
              VALUES (
                  source.address1,
                  source.address2,
                  source.api_key,
                  source.city,
                  source.company,
                  source.country,
                  source.created_at,
                  source.credentials,
                  source.description,
                  source.email,
                  source.first_name,
                  source.icon,
                  source.id,
                  source.identification,
                  source.informal,
                  source.last_name,
                  source.linkedin,
                  source.middle_name,
                  source.mobile,
                  source.phone,
                  source.salutation,
                  source.state,
                  source.suffix,
                  source.title,
                  source.twitter,
                  source.updated_at,
                  source.url,
                  source.zip_code
              );
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Truncate Speaker Details Table:
      type: "sql-executor"
      transitions:
        success:
        - "Table Iterator"
      parameters:
        componentName: "Truncate Speaker Details Table"
        scriptLocation: "Component"
        declareSqlVariables: "Include selected"
        variablesToInclude:
        sqlScript: "TRUNCATE TABLE PROD_BRONZE_DB.LMS.SPEAKER_DETAILS;"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Log LMS API Failure:
      type: "sql-executor"
      parameters:
        componentName: "Log LMS API Failure"
        scriptLocation: "Component"
        declareSqlVariables: "Include selected"
        variablesToInclude:
        sqlScript: |
          -- Log failure to audit table with error details
          INSERT INTO PROD_BRONZE_DB.LMS.LMS_AUDIT_LOG (
              TABLE_NAME,
              ROW_COUNT,
              LOAD_TIME,
              LOAD_STATUS,
              ERROR_MESSAGE
          )
          VALUES (
              'SPEAKER_DETAILS',
              -1,  -- Negative count indicates failure
              CURRENT_TIMESTAMP,
              'FAILED',  -- Load status indicating failure
              'Failed Unknown error occurred during LMS API batch processing'
          );
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
  variables:
    v_speaker_id:
      metadata:
        type: "TEXT"
        description: ""
        scope: "COPIED"
        visibility: "PUBLIC"
      defaultValue: "39d0efc1-5d3c-40f8-ad2b-85d7310998aa"
design:
  components:
    Start:
      position:
        x: -350
        "y": 20
      tempMetlId: 1
    LMS API:
      position:
        x: -120
        "y": 0
      tempMetlId: 3
    Table Iterator:
      position:
        x: -120
        "y": 0
      tempMetlId: 4
    Log speaker detail ingestion:
      position:
        x: 0
        "y": 20
      tempMetlId: 6
    'Data Speaker Detail  ':
      position:
        x: 140
        "y": 20
      tempMetlId: 7
    Truncate Speaker Details Table:
      position:
        x: -240
        "y": 20
      tempMetlId: 8
    Log LMS API Failure:
      position:
        x: 80
        "y": -80
      tempMetlId: 9
