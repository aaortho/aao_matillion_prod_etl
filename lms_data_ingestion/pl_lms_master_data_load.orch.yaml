type: "orchestration"
version: "1.0"
pipeline:
  components:
    Start:
      type: "start"
      transitions:
        unconditional:
        - "LMS SPEAKERS"
        - "LMS ACCREDITATION"
        - "LMS EVENTS"
        - "LMS FACILITIES"
        - "LMS ORDERS"
        - "LMS PRODUCTS"
        - "LMS USERS"
      parameters:
        componentName: "Start"
    LMS EVENTS:
      type: "modular-api-extract-input-v2"
      transitions:
        success:
        - "Log Events Ingestion"
      parameters:
        componentName: "LMS EVENTS"
        componentId: "custom_v2-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
        inputId: "api-extract-input-v2"
        api-extract-input-v2:
          profile: "custom-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
          endpoint: "Events"
          connectionRef:
            overrides:
              authType: "NONE"
          uriParams:
          queryParams:
          headerParams:
          postBody:
          pageLimit:
          logLevel: "ERROR"
          loadSelectedData: "No"
        outputId: "snowflake-output-connector-v0"
        snowflake-output-connector-v0:
          warehouse: "[Environment Default]"
          database: "[Environment Default]"
          schema: "LMS"
          tableName: "EVENTS"
          createTableMode: "TRUNCATE_AND_INSERT"
          cleanStagedFiles: "Yes"
          stagePlatform: "SNOWFLAKE"
          snowflake#internalStageType: "USER"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    LMS FACILITIES:
      type: "modular-api-extract-input-v2"
      transitions:
        success:
        - "Log Facilities Ingestion"
      parameters:
        componentName: "LMS FACILITIES"
        componentId: "custom_v2-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
        inputId: "api-extract-input-v2"
        api-extract-input-v2:
          profile: "custom-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
          endpoint: "Facilities"
          connectionRef:
            overrides:
              authType: "NONE"
          uriParams:
          queryParams:
          headerParams:
          postBody:
          pageLimit:
          logLevel: "ERROR"
          loadSelectedData: "No"
        outputId: "snowflake-output-connector-v0"
        snowflake-output-connector-v0:
          warehouse: "[Environment Default]"
          database: "[Environment Default]"
          schema: "LMS"
          tableName: "FACILITIES"
          createTableMode: "TRUNCATE_AND_INSERT"
          cleanStagedFiles: "Yes"
          stagePlatform: "SNOWFLAKE"
          snowflake#internalStageType: "USER"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    LMS ORDERS:
      type: "modular-api-extract-input-v2"
      transitions:
        success:
        - "Log Orders Ingestion"
      parameters:
        componentName: "LMS ORDERS"
        componentId: "custom_v2-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
        inputId: "api-extract-input-v2"
        api-extract-input-v2:
          profile: "custom-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
          endpoint: "Orders"
          connectionRef:
            overrides:
              authType: "NONE"
          uriParams:
          queryParams:
          headerParams:
          postBody:
          pageLimit:
          logLevel: "ERROR"
          loadSelectedData: "No"
        outputId: "snowflake-output-connector-v0"
        snowflake-output-connector-v0:
          warehouse: "[Environment Default]"
          database: "[Environment Default]"
          schema: "LMS"
          tableName: "ORDERS"
          createTableMode: "TRUNCATE_AND_INSERT"
          cleanStagedFiles: "Yes"
          stagePlatform: "SNOWFLAKE"
          snowflake#internalStageType: "USER"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    LMS SPEAKERS:
      type: "modular-api-extract-input-v2"
      transitions:
        success:
        - "Log Speakers Ingestion"
      parameters:
        componentName: "LMS SPEAKERS"
        componentId: "custom_v2-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
        inputId: "api-extract-input-v2"
        api-extract-input-v2:
          profile: "custom-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
          endpoint: "Speakers"
          connectionRef:
            overrides:
              authType: "NONE"
          uriParams:
          queryParams:
          headerParams:
          postBody:
          pageLimit:
          logLevel: "ERROR"
          loadSelectedData: "No"
        outputId: "snowflake-output-connector-v0"
        snowflake-output-connector-v0:
          warehouse: "[Environment Default]"
          database: "[Environment Default]"
          schema: "LMS"
          tableName: "SPEAKERS"
          createTableMode: "TRUNCATE_AND_INSERT"
          cleanStagedFiles: "Yes"
          stagePlatform: "SNOWFLAKE"
          snowflake#internalStageType: "USER"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    LMS ACCREDITATION:
      type: "modular-api-extract-input-v2"
      transitions:
        success:
        - "Log Accreditation Ingestion"
      parameters:
        componentName: "LMS ACCREDITATION"
        componentId: "custom_v2-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
        inputId: "api-extract-input-v2"
        api-extract-input-v2:
          profile: "custom-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
          endpoint: "Accreditation"
          connectionRef:
            overrides:
              authType: "NONE"
          uriParams:
          queryParams:
          headerParams:
          postBody:
          pageLimit:
          logLevel: "ERROR"
          loadSelectedData: "No"
        outputId: "snowflake-output-connector-v0"
        snowflake-output-connector-v0:
          warehouse: "[Environment Default]"
          database: "[Environment Default]"
          schema: "LMS"
          tableName: "ACCREDITATION"
          createTableMode: "TRUNCATE_AND_INSERT"
          cleanStagedFiles: "Yes"
          stagePlatform: "SNOWFLAKE"
          snowflake#internalStageType: "USER"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    LMS PRODUCTS:
      type: "modular-api-extract-input-v2"
      transitions:
        success:
        - "Log Products Ingestion"
      parameters:
        componentName: "LMS PRODUCTS"
        componentId: "custom_v2-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
        inputId: "api-extract-input-v2"
        api-extract-input-v2:
          profile: "custom-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
          endpoint: "Products"
          connectionRef:
            overrides:
              authType: "NONE"
          uriParams:
          queryParams:
          headerParams:
          postBody:
          pageLimit:
          logLevel: "ERROR"
          loadSelectedData: "No"
        outputId: "snowflake-output-connector-v0"
        snowflake-output-connector-v0:
          warehouse: "[Environment Default]"
          database: "[Environment Default]"
          schema: "LMS"
          tableName: "PRODUCTS"
          createTableMode: "TRUNCATE_AND_INSERT"
          cleanStagedFiles: "Yes"
          stagePlatform: "SNOWFLAKE"
          snowflake#internalStageType: "USER"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    LMS USERS:
      type: "modular-api-extract-input-v2"
      transitions:
        success:
        - "Log Users Ingestion"
      parameters:
        componentName: "LMS USERS"
        componentId: "custom_v2-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
        inputId: "api-extract-input-v2"
        api-extract-input-v2:
          profile: "custom-b95fee52-8db0-4fe4-94d1-623e1ca69a28"
          endpoint: "Users"
          connectionRef:
            overrides:
              authType: "NONE"
          uriParams:
          queryParams:
          headerParams:
          postBody:
          pageLimit:
          logLevel: "ERROR"
          loadSelectedData: "No"
        outputId: "snowflake-output-connector-v0"
        snowflake-output-connector-v0:
          warehouse: "[Environment Default]"
          database: "[Environment Default]"
          schema: "LMS"
          tableName: "USERS"
          createTableMode: "TRUNCATE_AND_INSERT"
          cleanStagedFiles: "Yes"
          stagePlatform: "SNOWFLAKE"
          snowflake#internalStageType: "USER"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Log Events Ingestion:
      type: "sql-executor"
      transitions:
        success:
        - "Data Parser Events"
      parameters:
        componentName: "Log Events Ingestion"
        scriptLocation: "Component"
        declareSqlVariables: "Include all"
        sqlScript: "INSERT INTO PROD_BRONZE_DB.LMS.LMS_AUDIT_LOG\nSELECT \n    'EVENTS'\
          \ as TABLE_NAME,\n    COUNT(*) as ROW_COUNT,\n    CURRENT_TIMESTAMP as CHECK_TIME\n\
          FROM PROD_BRONZE_DB.LMS.EVENTS;\n"
    Log Facilities Ingestion:
      type: "sql-executor"
      transitions:
        success:
        - "Data Parser Facilities"
      parameters:
        componentName: "Log Facilities Ingestion"
        scriptLocation: "Component"
        declareSqlVariables: "Include all"
        sqlScript: "INSERT INTO PROD_BRONZE_DB.LMS.LMS_AUDIT_LOG\nSELECT \n    'FACILITIES'\
          \ as TABLE_NAME,\n    COUNT(*) as ROW_COUNT,\n    CURRENT_TIMESTAMP as CHECK_TIME\n\
          FROM PROD_BRONZE_DB.LMS.FACILITIES;\n"
    Log Orders Ingestion:
      type: "sql-executor"
      transitions:
        success:
        - "Data Parser Orders"
      parameters:
        componentName: "Log Orders Ingestion"
        scriptLocation: "Component"
        declareSqlVariables: "Include all"
        sqlScript: "INSERT INTO PROD_BRONZE_DB.LMS.LMS_AUDIT_LOG\nSELECT \n    'ORDERS'\
          \ as TABLE_NAME,\n    COUNT(*) as ROW_COUNT,\n    CURRENT_TIMESTAMP as CHECK_TIME\n\
          FROM PROD_BRONZE_DB.LMS.ORDERS;\n"
    Log Speakers Ingestion:
      type: "sql-executor"
      transitions:
        success:
        - "Data Parser Speakers "
      parameters:
        componentName: "Log Speakers Ingestion"
        scriptLocation: "Component"
        declareSqlVariables: "Include all"
        sqlScript: "INSERT INTO PROD_BRONZE_DB.LMS.LMS_AUDIT_LOG\nSELECT \n    'SPEAKERS'\
          \ as TABLE_NAME,\n    COUNT(*) as ROW_COUNT,\n    CURRENT_TIMESTAMP as CHECK_TIME\n\
          FROM PROD_BRONZE_DB.LMS.SPEAKERS;\n"
    Log Accreditation Ingestion:
      type: "sql-executor"
      transitions:
        success:
        - "Data Parser Accreditation"
      parameters:
        componentName: "Log Accreditation Ingestion"
        scriptLocation: "Component"
        declareSqlVariables: "Include all"
        sqlScript: "INSERT INTO PROD_BRONZE_DB.LMS.LMS_AUDIT_LOG\nSELECT \n    'ACCREDITATION'\
          \ as TABLE_NAME,\n    COUNT(*) as ROW_COUNT,\n    CURRENT_TIMESTAMP as CHECK_TIME\n\
          FROM PROD_BRONZE_DB.LMS.ACCREDITATION;\n"
    Log Products Ingestion:
      type: "sql-executor"
      transitions:
        success:
        - "Data Parser Products"
      parameters:
        componentName: "Log Products Ingestion"
        scriptLocation: "Component"
        declareSqlVariables: "Include all"
        sqlScript: "INSERT INTO PROD_BRONZE_DB.LMS.LMS_AUDIT_LOG\nSELECT \n    'PRODUCTS'\
          \ as TABLE_NAME,\n    COUNT(*) as ROW_COUNT,\n    CURRENT_TIMESTAMP as CHECK_TIME\n\
          FROM PROD_BRONZE_DB.LMS.PRODUCTS;\n"
    Log Users Ingestion:
      type: "sql-executor"
      transitions:
        success:
        - "Data Parser Users"
      parameters:
        componentName: "Log Users Ingestion"
        scriptLocation: "Component"
        declareSqlVariables: "Include all"
        sqlScript: "INSERT INTO PROD_BRONZE_DB.LMS.LMS_AUDIT_LOG\nSELECT \n    'USERS'\
          \ as TABLE_NAME,\n    COUNT(*) as ROW_COUNT,\n    CURRENT_TIMESTAMP as CHECK_TIME\n\
          FROM PROD_BRONZE_DB.LMS.USERS;\n"
    'Data Parser Speakers ':
      type: "sql-executor"
      parameters:
        componentName: "Data Parser Speakers "
        scriptLocation: "Component"
        declareSqlVariables: "Include selected"
        variablesToInclude:
        sqlScript: "MERGE INTO PROD_SILVER_DB.LMS.SPEAKERS AS target\r\nUSING (\r\n\
          \    SELECT\r\n        item.value:uuid::STRING AS uuid,\r\n        item.value:api_key::STRING\
          \ AS api_key,\r\n        item.value:email::STRING AS email,\r\n        item.value:first_name::STRING\
          \ AS first_name,\r\n        item.value:last_name::STRING AS last_name,\r\
          \n        item.value:identification::STRING AS identification\r\n    FROM\
          \ PROD_BRONZE_DB.LMS.SPEAKERS,\r\n         LATERAL FLATTEN(input => DATA_VALUE:data)\
          \ AS item\r\n) AS source\r\nON target.uuid = source.uuid\r\n\r\nWHEN MATCHED\
          \ THEN\r\n    UPDATE SET\r\n        target.api_key = source.api_key,\r\n\
          \        target.email = source.email,\r\n        target.first_name = source.first_name,\r\
          \n        target.last_name = source.last_name,\r\n        target.identification\
          \ = source.identification\r\n\r\nWHEN NOT MATCHED THEN\r\n    INSERT (\r\
          \n        uuid,\r\n        api_key,\r\n        email,\r\n        first_name,\r\
          \n        last_name,\r\n        identification\r\n    )\r\n    VALUES (\r\
          \n        source.uuid,\r\n        source.api_key,\r\n        source.email,\r\
          \n        source.first_name,\r\n        source.last_name,\r\n        source.identification\r\
          \n    );\r\n"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Data Parser Accreditation:
      type: "sql-executor"
      parameters:
        componentName: "Data Parser Accreditation"
        scriptLocation: "Component"
        declareSqlVariables: "Include selected"
        variablesToInclude:
        sqlScript: "MERGE INTO PROD_SILVER_DB.LMS.ACCREDITATION AS target\r\nUSING\
          \ (\r\n    SELECT \r\n        record.value:id::STRING AS id,\r\n       \
          \ record.value:awarded_on AS awarded_on,\r\n        record.value:certificate_id::STRING\
          \ AS certificate_id,\r\n\r\n        record.value:user.id::STRING AS user_id,\r\
          \n        record.value:user.email::STRING AS user_email,\r\n        record.value:user.api_username::STRING\
          \ AS api_username,\r\n        record.value:user.first_name::STRING AS first_name,\r\
          \n        record.value:user.last_name::STRING AS last_name,\r\n\r\n    \
          \    record.value:related_test.test_id::STRING AS test_id,\r\n        record.value:related_test.test_type::STRING\
          \ AS test_type,\r\n        record.value:related_test.score_percentage::NUMBER\
          \ AS score_percentage,\r\n        record.value:related_test.attempts::NUMBER\
          \ AS attempts,\r\n        record.value:related_test.completed_on AS completed_on,\r\
          \n\r\n        record.value:related_test.product.id::STRING AS product_id,\r\
          \n        record.value:related_test.product.name::STRING AS product_name,\r\
          \n        record.value:related_test.product.type::STRING AS product_type,\r\
          \n        record.value:related_test.product.identification::STRING AS product_identification,\r\
          \n        record.value:related_test.product.api_key::STRING AS product_api_key,\r\
          \n\r\n        credit.value:type_id::STRING AS credit_type_id,\r\n      \
          \  credit.value:name::STRING AS credit_name,\r\n        credit.value:unit::STRING\
          \ AS credit_unit,\r\n        credit.value:amount::FLOAT AS credit_amount\r\
          \n    FROM PROD_BRONZE_DB.LMS.ACCREDITATION,\r\n         LATERAL FLATTEN(input\
          \ => DATA_VALUE:records) AS record,\r\n         LATERAL FLATTEN(input =>\
          \ record.value:credits) AS credit\r\n) AS source\r\nON target.id = source.id\
          \ \r\n\r\nWHEN MATCHED THEN\r\n    UPDATE SET\r\n        target.awarded_on\
          \ = source.awarded_on,\r\n        target.certificate_id = source.certificate_id,\r\
          \n        target.user_id = source.user_id,\r\n        target.user_email\
          \ = source.user_email,\r\n        target.api_username = source.api_username,\r\
          \n        target.first_name = source.first_name,\r\n        target.last_name\
          \ = source.last_name,\r\n        target.test_id = source.test_id,\r\n  \
          \      target.test_type = source.test_type,\r\n        target.score_percentage\
          \ = source.score_percentage,\r\n        target.attempts = source.attempts,\r\
          \n        target.completed_on = source.completed_on,\r\n        target.product_id\
          \ = source.product_id,\r\n        target.product_name = source.product_name,\r\
          \n        target.product_type = source.product_type,\r\n        target.product_identification\
          \ = source.product_identification,\r\n        target.product_api_key = source.product_api_key,\r\
          \n        target.credit_name = source.credit_name,\r\n        target.credit_unit\
          \ = source.credit_unit,\r\n        target.credit_amount = source.credit_amount\r\
          \n\r\nWHEN NOT MATCHED THEN\r\n    INSERT (\r\n        id,\r\n        awarded_on,\r\
          \n        certificate_id,\r\n        user_id,\r\n        user_email,\r\n\
          \        api_username,\r\n        first_name,\r\n        last_name,\r\n\
          \        test_id,\r\n        test_type,\r\n        score_percentage,\r\n\
          \        attempts,\r\n        completed_on,\r\n        product_id,\r\n \
          \       product_name,\r\n        product_type,\r\n        product_identification,\r\
          \n        product_api_key,\r\n        credit_type_id,\r\n        credit_name,\r\
          \n        credit_unit,\r\n        credit_amount\r\n    )\r\n    VALUES (\r\
          \n        source.id,\r\n        source.awarded_on,\r\n        source.certificate_id,\r\
          \n        source.user_id,\r\n        source.user_email,\r\n        source.api_username,\r\
          \n        source.first_name,\r\n        source.last_name,\r\n        source.test_id,\r\
          \n        source.test_type,\r\n        source.score_percentage,\r\n    \
          \    source.attempts,\r\n        source.completed_on,\r\n        source.product_id,\r\
          \n        source.product_name,\r\n        source.product_type,\r\n     \
          \   source.product_identification,\r\n        source.product_api_key,\r\n\
          \        source.credit_type_id,\r\n        source.credit_name,\r\n     \
          \   source.credit_unit,\r\n        source.credit_amount\r\n    );"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Data Parser Facilities:
      type: "sql-executor"
      parameters:
        componentName: "Data Parser Facilities"
        scriptLocation: "Component"
        declareSqlVariables: "Include selected"
        variablesToInclude:
        sqlScript: "MERGE INTO PROD_SILVER_DB.LMS.FACILITIES AS target\r\nUSING (\r\
          \n    SELECT\r\n        item.value:id::STRING AS id,\r\n        item.value:name::STRING\
          \ AS name,\r\n        item.value:description::STRING AS description,\r\n\
          \        item.value:address_1::STRING AS address_1,\r\n        item.value:address_2::STRING\
          \ AS address_2,\r\n        item.value:city::STRING AS city,\r\n        item.value:state::STRING\
          \ AS state,\r\n        item.value:zipcode::STRING AS zipcode,\r\n      \
          \  item.value:country::STRING AS country,\r\n        item.value:phone::STRING\
          \ AS phone,\r\n        item.value:website::STRING AS website\r\n    FROM\
          \ PROD_BRONZE_DB.LMS.FACILITIES,\r\n         LATERAL FLATTEN(input => DATA_VALUE:data)\
          \ AS item\r\n) AS source\r\nON target.ID = source.id\r\n\r\nWHEN MATCHED\
          \ THEN\r\n    UPDATE SET\r\n        target.NAME = source.name,\r\n     \
          \   target.DESCRIPTION = source.description,\r\n        target.ADDRESS_1\
          \ = source.address_1,\r\n        target.ADDRESS_2 = source.address_2,\r\n\
          \        target.CITY = source.city,\r\n        target.STATE = source.state,\r\
          \n        target.ZIPCODE = source.zipcode,\r\n        target.COUNTRY = source.country,\r\
          \n        target.PHONE = source.phone,\r\n        target.WEBSITE = source.website\r\
          \n\r\nWHEN NOT MATCHED THEN\r\n    INSERT (\r\n        ID,\r\n        NAME,\r\
          \n        DESCRIPTION,\r\n        ADDRESS_1,\r\n        ADDRESS_2,\r\n \
          \       CITY,\r\n        STATE,\r\n        ZIPCODE,\r\n        COUNTRY,\r\
          \n        PHONE,\r\n        WEBSITE\r\n    )\r\n    VALUES (\r\n       \
          \ source.id,\r\n        source.name,\r\n        source.description,\r\n\
          \        source.address_1,\r\n        source.address_2,\r\n        source.city,\r\
          \n        source.state,\r\n        source.zipcode,\r\n        source.country,\r\
          \n        source.phone,\r\n        source.website\r\n    );\r\n"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Data Parser Orders:
      type: "sql-executor"
      parameters:
        componentName: "Data Parser Orders"
        scriptLocation: "Component"
        declareSqlVariables: "Include selected"
        variablesToInclude:
        sqlScript: "MERGE INTO PROD_SILVER_DB.LMS.ORDERS AS target\r\nUSING (\r\n\
          \    SELECT\r\n        item.value:uuid::STRING AS uuid,\r\n        item.value:created_at::TIMESTAMP\
          \ AS created_at,\r\n        item.value:external_reference::STRING AS external_reference,\r\
          \n        item.value:status::STRING AS status,\r\n\r\n        item.value:user.id::STRING\
          \ AS user_id,\r\n        item.value:user.api_username::STRING AS api_username,\r\
          \n        item.value:user.email::STRING AS user_email,\r\n        item.value:user.first_name::STRING\
          \ AS first_name,\r\n        item.value:user.last_name::STRING AS last_name,\r\
          \n\r\n        (item.value:current_totals.total::NUMBER)/100 AS current_total\r\
          \n    FROM PROD_BRONZE_DB.LMS.ORDERS,\r\n         LATERAL FLATTEN(input\
          \ => DATA_VALUE:data) AS item\r\n) AS source\r\nON target.uuid = source.uuid\r\
          \n\r\nWHEN MATCHED THEN\r\n    UPDATE SET\r\n        target.created_at =\
          \ source.created_at,\r\n        target.external_reference = source.external_reference,\r\
          \n        target.status = source.status,\r\n        target.user_id = source.user_id,\r\
          \n        target.api_username = source.api_username,\r\n        target.user_email\
          \ = source.user_email,\r\n        target.first_name = source.first_name,\r\
          \n        target.last_name = source.last_name,\r\n        target.current_total\
          \ = source.current_total\r\n\r\nWHEN NOT MATCHED THEN\r\n    INSERT (\r\n\
          \        uuid,\r\n        created_at,\r\n        external_reference,\r\n\
          \        status,\r\n        user_id,\r\n        api_username,\r\n      \
          \  user_email,\r\n        first_name,\r\n        last_name,\r\n        current_total\r\
          \n    )\r\n    VALUES (\r\n        source.uuid,\r\n        source.created_at,\r\
          \n        source.external_reference,\r\n        source.status,\r\n     \
          \   source.user_id,\r\n        source.api_username,\r\n        source.user_email,\r\
          \n        source.first_name,\r\n        source.last_name,\r\n        source.current_total\r\
          \n    );\r\n"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Data Parser Events:
      type: "sql-executor"
      parameters:
        componentName: "Data Parser Events"
        scriptLocation: "Component"
        declareSqlVariables: "Include selected"
        variablesToInclude:
        sqlScript: "MERGE INTO PROD_SILVER_DB.LMS.EVENTS AS target\r\nUSING (\r\n\
          \    SELECT\r\n        item.value:id::STRING AS id,\r\n        item.value:name::STRING\
          \ AS name,\r\n        item.value:identification::STRING AS identification,\r\
          \n        item.value:api_key::STRING AS api_key,\r\n        item.value:start_date::TIMESTAMP\
          \ AS start_date,\r\n        item.value:end_date::TIMESTAMP AS end_date\r\
          \n    FROM PROD_BRONZE_DB.LMS.EVENTS,\r\n         LATERAL FLATTEN(input\
          \ => DATA_VALUE:data) AS item\r\n) AS source\r\nON target.id = source.id\r\
          \n\r\nWHEN MATCHED THEN\r\n    UPDATE SET\r\n        target.name = source.name,\r\
          \n        target.identification = source.identification,\r\n        target.api_key\
          \ = source.api_key,\r\n        target.start_date = source.start_date,\r\n\
          \        target.end_date = source.end_date\r\n\r\nWHEN NOT MATCHED THEN\r\
          \n    INSERT (\r\n        id,\r\n        name,\r\n        identification,\r\
          \n        api_key,\r\n        start_date,\r\n        end_date\r\n    )\r\
          \n    VALUES (\r\n        source.id,\r\n        source.name,\r\n       \
          \ source.identification,\r\n        source.api_key,\r\n        source.start_date,\r\
          \n        source.end_date\r\n    );\r\n"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Data Parser Products:
      type: "sql-executor"
      parameters:
        componentName: "Data Parser Products"
        scriptLocation: "Component"
        declareSqlVariables: "Include selected"
        variablesToInclude:
        sqlScript: "MERGE INTO PROD_SILVER_DB.LMS.PRODUCTS AS target\r\nUSING (\r\n\
          \    SELECT\r\n        item.value:id::STRING AS id,\r\n        item.value:api_key::STRING\
          \ AS api_key,\r\n        item.value:created_at::TIMESTAMP AS created_at,\r\
          \n        item.value:description::STRING AS description,\r\n        item.value:discoverable::BOOLEAN\
          \ AS discoverable,\r\n        item.value:icon_url::STRING AS icon_url,\r\
          \n        item.value:identification::STRING AS identification,\r\n     \
          \   item.value:name::STRING AS name,\r\n        item.value:status::STRING\
          \ AS status,\r\n        item.value:teaser::STRING AS teaser,\r\n       \
          \ item.value:type::STRING AS type\r\n    FROM PROD_BRONZE_DB.LMS.PRODUCTS,\r\
          \n         LATERAL FLATTEN(input => DATA_VALUE:data) AS item\r\n) AS source\r\
          \nON target.id = source.id\r\n\r\nWHEN MATCHED THEN\r\n    UPDATE SET\r\n\
          \        target.api_key = source.api_key,\r\n        target.created_at =\
          \ source.created_at,\r\n        target.description = source.description,\r\
          \n        target.discoverable = source.discoverable,\r\n        target.icon_url\
          \ = source.icon_url,\r\n        target.identification = source.identification,\r\
          \n        target.name = source.name,\r\n        target.status = source.status,\r\
          \n        target.teaser = source.teaser,\r\n        target.type = source.type\r\
          \n\r\nWHEN NOT MATCHED THEN\r\n    INSERT (\r\n        id,\r\n        api_key,\r\
          \n        created_at,\r\n        description,\r\n        discoverable,\r\
          \n        icon_url,\r\n        identification,\r\n        name,\r\n    \
          \    status,\r\n        teaser,\r\n        type\r\n    )\r\n    VALUES (\r\
          \n        source.id,\r\n        source.api_key,\r\n        source.created_at,\r\
          \n        source.description,\r\n        source.discoverable,\r\n      \
          \  source.icon_url,\r\n        source.identification,\r\n        source.name,\r\
          \n        source.status,\r\n        source.teaser,\r\n        source.type\r\
          \n    );\r\n"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
    Data Parser Users:
      type: "sql-executor"
      parameters:
        componentName: "Data Parser Users"
        scriptLocation: "Component"
        declareSqlVariables: "Include selected"
        variablesToInclude:
        sqlScript: "MERGE INTO PROD_SILVER_DB.LMS.USERS AS target\r\nUSING (\r\n \
          \   SELECT\r\n        item.value:id::STRING AS user_id,\r\n        item.value:api_username::STRING\
          \ AS api_username,\r\n        item.value:email::STRING AS email,\r\n   \
          \     item.value:first_name::STRING AS first_name,\r\n        item.value:last_name::STRING\
          \ AS last_name\r\n    FROM PROD_BRONZE_DB.LMS.USERS,\r\n         LATERAL\
          \ FLATTEN(input => DATA_VALUE:data) AS item\r\n) AS source\r\nON target.user_id\
          \ = source.user_id\r\n\r\nWHEN MATCHED THEN\r\n    UPDATE SET\r\n      \
          \  target.api_username = source.api_username,\r\n        target.email =\
          \ source.email,\r\n        target.first_name = source.first_name,\r\n  \
          \      target.last_name = source.last_name\r\n\r\nWHEN NOT MATCHED THEN\r\
          \n    INSERT (\r\n        user_id,\r\n        api_username,\r\n        email,\r\
          \n        first_name,\r\n        last_name\r\n    )\r\n    VALUES (\r\n\
          \        source.user_id,\r\n        source.api_username,\r\n        source.email,\r\
          \n        source.first_name,\r\n        source.last_name\r\n    );\r\n"
      postProcessing:
        updateOutputMessage:
        updateScalarVariables:
design:
  components:
    Start:
      position:
        x: -60
        "y": 220
      tempMetlId: 1
    LMS EVENTS:
      position:
        x: 240
        "y": 160
      tempMetlId: 2
    LMS FACILITIES:
      position:
        x: 240
        "y": 230
      tempMetlId: 3
    LMS ORDERS:
      position:
        x: 240
        "y": 310
      tempMetlId: 4
    LMS SPEAKERS:
      position:
        x: 240
        "y": -20
      tempMetlId: 5
    LMS ACCREDITATION:
      position:
        x: 240
        "y": 70
      tempMetlId: 6
    LMS PRODUCTS:
      position:
        x: 240
        "y": 390
      tempMetlId: 7
    LMS USERS:
      position:
        x: 240
        "y": 480
      tempMetlId: 8
    Log Events Ingestion:
      position:
        x: 400
        "y": 160
      tempMetlId: 9
    Log Facilities Ingestion:
      position:
        x: 400
        "y": 230
      tempMetlId: 10
    Log Orders Ingestion:
      position:
        x: 400
        "y": 310
      tempMetlId: 11
    Log Speakers Ingestion:
      position:
        x: 400
        "y": -20
      tempMetlId: 12
    Log Accreditation Ingestion:
      position:
        x: 400
        "y": 70
      tempMetlId: 13
    Log Products Ingestion:
      position:
        x: 400
        "y": 390
      tempMetlId: 14
    Log Users Ingestion:
      position:
        x: 400
        "y": 480
      tempMetlId: 15
    'Data Parser Speakers ':
      position:
        x: 550
        "y": -20
      tempMetlId: 16
    Data Parser Accreditation:
      position:
        x: 550
        "y": 70
      tempMetlId: 17
    Data Parser Facilities:
      position:
        x: 550
        "y": 230
      tempMetlId: 18
    Data Parser Orders:
      position:
        x: 550
        "y": 310
      tempMetlId: 19
    Data Parser Events:
      position:
        x: 550
        "y": 160
      tempMetlId: 20
    Data Parser Products:
      position:
        x: 550
        "y": 390
      tempMetlId: 21
    Data Parser Users:
      position:
        x: 550
        "y": 480
      tempMetlId: 22
